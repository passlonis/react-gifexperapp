{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifCardItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","agregarCategoria","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","d","id","title","images","downsized_medium","GifCardItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","img","GifExpertApp","categorias","setCategoria","cat","categoria","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAAuB,EAEdC,mBAAS,IAFK,mBAE3CC,EAF2C,KAE/BC,EAF+B,KAoBlD,OACG,8BACM,sBAAMC,SAbM,SAACC,GACnBA,EAAEC,iBAEuB,KAAtBJ,EAAWK,OACXC,QAAQC,IAAI,UAEZT,EAAmBE,GACnBC,EAAc,MAMX,SACG,uBACMO,KAAK,OACLC,MAAST,EACTU,SAtBO,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,e,+BCPhBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEXC,EAFW,0FAE+EC,UAAUH,GAFzF,sBAGOI,MAAMF,GAHb,cAGXG,EAHW,gBAIIA,EAAUC,OAJd,uBAIVC,EAJU,EAIVA,KAGDC,EAAOD,EAAKE,KAAI,SAACC,GACpB,MACG,CACGC,GAAID,EAAEC,GACNC,MAAOF,EAAEE,MACTV,IAAKQ,EAAEG,OAAOC,iBAAiBZ,QAZvB,kBAiBTM,GAjBS,4CAAH,sDCAPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIlC,OACG,sBAAKc,UAAU,gDAAf,UACG,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCJIO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEbd,mBAAS,CAChCqB,KAAK,GACLa,SAAS,IAJ2B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KA0BvC,OAnBAC,qBAAU,WAEPxB,EAAQC,GACJwB,MAAK,SAACC,GAEJC,YAAW,WACRJ,EACA,CACGf,KAAKkB,EACLL,SAAS,MAGZ,UAKT,CAACpB,IAEGqB,EDvByBM,CAAa3B,GAAhCa,EAFyB,EAE/BN,KAAca,EAFiB,EAEjBA,QAerB,OACG,qCACG,mCAAOpB,EAAP,OAECoB,EAAS,yCAAkB,KAE5B,qBAAKJ,UAAU,YAAf,SAESH,EAAOJ,KAAI,SAACmB,GACT,OACG,cAAC,EAAD,eAA+BA,GAAbA,EAAIjB,aE5BjCkB,EAAe,WAAO,IAAD,EAEI3C,mBAAS,CAAC,eAFd,mBAExB4C,EAFwB,KAEZC,EAFY,KAW/B,OACG,8BACG,qCACG,8CAEA,cAAC,EAAD,CAAa9C,iBAZG,WAAa,IAAZ+C,EAAW,uDAAP,GAC3BD,EAAa,CAACC,GAAF,mBAAUF,QAYhB,uBAEA,uDACA,6BAEMA,EAAWrB,KAAI,SAACwB,GAEb,OAAQ,cAAC,EAAD,CAEOjC,SAAYiC,GADPA,c,MCrBzCC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.f84133ed.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ agregarCategoria }) => {\n\n   const [inputValue, setInputValue] = useState('');\n\n   const hadleInputChange = (e) => {\n\n      setInputValue(e.target.value);\n   }\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      \n      if(inputValue.trim() === \"\"){\n         console.log(\"VACIO\");\n      }else{\n         agregarCategoria( (inputValue));\n         setInputValue(\"\");\n      }\n   }\n\n   return (\n      <div>\n            <form onSubmit= { handleSubmit }>\n               <input \n                     type=\"text\"\n                     value= { inputValue }\n                     onChange= { hadleInputChange }\n               />\n            </form>\n      </div>\n   )\n}\n\nAddCategory.propTypes = {\n   agregarCategoria: PropTypes.func.isRequired\n}\n","\n\nexport const getGifs = async(category) => {\n\n      const url = `https://api.giphy.com/v1/gifs/search?api_key=PoU0Q4qwV4mzPj6OYgNLkfcpXJ1OJnNz&q=${ encodeURI(category) }&limit=10`;\n      const respuesta = await fetch(url);\n      const {data} = await respuesta.json();\n\n\n      const gifs = data.map((d)=>{\n         return(\n            {\n               id: d.id,\n               title: d.title,\n               url: d.images.downsized_medium.url\n            }\n         )\n      })\n\n      return (gifs);\n\n   }","import React from 'react'\n\nexport const GifCardItem = ({ title, url }) => {\n\n   // console.log(title);\n\n   return (\n      <div className=\"card animate__animated animate__fadeInDownBig\">\n         <img src={ url } alt={ title } />\n         <p> { title } </p>\n      </div>\n   )\n}\n","import React, { useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/GetGifs';\nimport { GifCardItem } from './GifCardItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n\n   const {data: images, loading} = useFetchGifs(category);\n\n\n// const [images, setImages] = useState([])\n\n//    useEffect(() => {\n      \n//       getGifs(category)\n//          .then( (imgs) => {\n//             setImages(imgs);\n//          } )\n\n//    }, [category])\n\n\n   return (\n      <>\n         <h3> { category } </h3>\n\n         {loading? <p> Loading</p> : null}\n\n         <div className=\"card-grid\">\n               {\n                  images.map((img) => {\n                     return (\n                        <GifCardItem key={img.id} { ...img } />\n                     )\n                  })\n               }\n         </div>\n\n      </>\n   )\n}\n   ","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/GetGifs\";\n\n\nexport const useFetchGifs = (category) => {\n\n   const [state, setstate] = useState({\n      data:[],\n      loading: true\n   });\n\n   useEffect(() => {\n      \n      getGifs(category)\n         .then((imgs) => {\n\n            setTimeout(() => {\n               setstate(\n               {\n                  data:imgs,\n                  loading: false\n               }\n            )\n            }, 2000);\n            \n         })\n\n      \n   }, [category])\n\n   return state; //retorna (data:[], loading: true)\n\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n   const [categorias, setCategoria] = useState(['Samurai Rx' ]);\n   \n   const agregarCategoria = (cat=\"\") => {\n      setCategoria([cat ,...categorias]);\n      // setCategoria((cate)=>{\n      //    return [...cate, 'Lithium'];\n      // })\n   }\n\n   return (\n      <div>\n         <>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory agregarCategoria = { agregarCategoria } />\n            <hr/>\n\n            <button > Agregar Elemento</button>\n            <ol>\n               {\n                  categorias.map((categoria) => {\n\n                     return  <GifGrid \n                                    key={categoria}  \n                                    category= { categoria } \n                              />\n                  })\n               }\n            </ol>\n         </>\n      </div>\n   )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}